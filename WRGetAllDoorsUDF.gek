scn WRGetAllDoorsUDF

begin function { }
	; array_var aAllDoors

	PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Gathering all doors..." )
;	WriteStringToFile "WR_all_edges.txt" 0 "graph {%r"
	array_var aGLTA = Ar_Filter (GLTA 58) WRQuestStart.udfOnlyDoorRefs
    array_var aOptions = Ar_Construct "Map" ;This will hold all mods with a link door, for plugin selection.
    int iYupIndex = WRQuestStart.iYupIndex
    string_var sMenu = "^World Randomizer Plugin Selection^Select the plugins to include:"
	; aAllDoors = Ar_Construct "Stringmap"
;	array_var aAlreadyEdge = Ar_Construct "Array"
	int iIndex = -1
	while (iIndex += 1) < (Ar_Size aGLTA)
		ref rDoor = aGLTA[iIndex]
		ref rLink = rDoor.GetTeleportDoor
		float fX = rLink.GetDoorTeleportX
		float fY = rLink.GetDoorTeleportY
		float fZ = rLink.GetDoorTeleportZ
		float fRot = rLink.GetDoorTeleportRot
;		ref rParent = rDoor.gpc
;		if rParent == 0
;			rParent = rDoor.gpw
;		endif

        if eval !(rDoor.IsInInterior)
            AuxVarSetRef ("*" + (RefToString (rDoor.gpw))) rDoor -1 WRQuestStart
        endif
        
        ;WRGreenHouse correction
        if rDoor.gpc == WRGreenHouse
            rDoor.GetPosEx fX fY fZ
            fRot = rDoor.GetAngle Z
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + rDoor.RefToString + " Pos: " + $fX + " " + $fY + " " + $fZ + " " + $fRot)
            if fRot == 0
                fX -= 40
                fRot = 360
            elseif fRot == 90
                fY += 40
            elseif fRot == 180
                fX += 40
            elseif fRot == 270
                fY -= 40
            endif
           
            fRot -= 90
           
            ;Special cases because I have issues.
            ;To be more precise, this is checking if the unused doors in the greenhouse are in fact being used.
            if eval rDoor == WRGreenHouseDoor26
                if eval (GFFM "FalloutNV.esm" "160D55").GetTeleportDoor
                    rDoor.SetRefFlag 256 0
                else
                    while !(rDoor.SetDoorTeleport rDoor)
                    loop
                endif
            elseif eval rDoor == WRGreenHouseDoor27 && (GFFM "FalloutNV.esm" "160D56").GetTeleportDoor
                rDoor.GetPosEx fX fY fZ
                fZ += 64
                rDoor.Enable
            elseif eval rDoor == WRGreenHouseDoor28 && (GFFM "FalloutNV.esm" "160D57").GetTeleportDoor
                rDoor.GetPosEx fX fY fZ
                fZ -= 64
                rDoor.Enable
            elseif eval rDoor == WRGreenHouseDoor29 && (GFFM "FalloutNV.esm" "160D58").GetTeleportDoor
                rDoor.GetPosEx fX fY fZ
                fZ -= 64
                rDoor.Enable
            endif
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + rDoor.RefToString + " Teleport pos: " + $fX + " " + $fY + " " + $fZ + " " + $fRot)
        else
            int iModIndex = GetSourceModIndex rDoor
            AuxVarSetRef ("*" + $iModIndex) rDoor -1 WRQuestStart
            if eval iModIndex != iYupIndex
                aOptions[iModIndex] = 1
            endif
        endif
        
        string_var sEntry = $fX + "," + $fY + "," + $fZ + "," + $fRot + "," + rLink.RefToString
		rDoor.RefMapSetStr "*aAllDoors" $sEntry ;Ar_List fX fY fZ fRot rLink ;rParent
        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| rDoor string: " + (rDoor.RefMapGetStr "*aAllDoors"))
		AddFormToFormList WRAllDoors rDoor
        
        ; if rDoor.gpc == WRGreenHouse
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + rDoor.RefToString + " aAllDoors pos: " + $aAllDoors[rDoor.RefToString][0] + " " + $aAllDoors[rDoor.RefToString][1] + " " + $aAllDoors[rDoor.RefToString][2] + " " + $aAllDoors[rDoor.RefToString][3])
        ; endif
	
;=======Leaving this stuff here but basically all it does is print out a file that (with modifications) can let you look at the door connections in GraphViz.
;		if eval (Ar_Find rDoor aAlreadyEdge) != Ar_BadNumericIndex
;			continue
;		endif
;		Ar_Append aAlreadyEdge rDoor
;		Ar_Append aAlreadyEdge rLink
;	
;		string_var sParent = GetEditorID rParent
;		if eval (sv_length sParent) < 1
;			sParent = GetFormIdString rParent
;		endif
;		ref rParentLink = rLink.gpc
;		if rParentLink == 0
;			rParentLink = rLink.gpw
;		endif
;		string_var sParentLink = GetEditorID rParentLink
;		if eval (sv_length sParentLink) < 1
;			sParentLink = GetFormIdString rParentLink
;		endif
;		
;		string_var sTooltip = GetFormIdString rDoor + "|" + GetFormIdString rLink
;		string_var sEdge = sv_construct "    %q%z%q -- %q%z%q tooltip=%q%z%q" sParent, sParentLink, sTooltip
;		int iLock = 0
;		if eval rDoor.GetLocked || rLink.GetLocked
;			sEdge = $sEdge + ", color=red"
;		endif
;		PrintF "WR_all_edges.txt" $sEdge + "]"
	loop
    
    aOptions = Ar_Keys aOptions 
    iIndex = -1
    while (iIndex += 1) < (Ar_Size aOptions)
        sMenu = $sMenu + "| " + GetModName (aOptions[iIndex])
        PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Discovered mod: " + GetModName (aOptions[iIndex]))
    loop

    sMenu = $sMenu + "|Select All|Done"
    AuxVarSetFromArr "*aOptions" aOptions WRQuestStart
    AuxVarSetStr "*sMenu" $sMenu 0 WRQuestStart
	PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Done." )
;	PrintF "WR_all_edges.txt" "}"
;	iDisconnectivity = Call WRConnectivityUDF
	
	; WRQuestStart.aAllDoors = aAllDoors
    ; SetINISection "aAllDoors" aAllDoors "WRaAllDoors" 

end