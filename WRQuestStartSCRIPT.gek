scn WRQuestStartSCRIPT

; array_var aAllDoors
array_var aDoorList
array_var aDoors
array_var aDoorsNoLink
array_var aDoorsToReset
array_var aDoorsUsed
array_var aIsolatedExteriors
array_var aIsolatedInteriors
array_var aOptions
array_var aOptionsSelected
array_var aRand
array_var aRecentDoors
array_var aShuffle
array_var aThreads
array_var aWatchedVariables
array_var aWhitelist
; array_var aWorldspacesDoorCount
float fID
float fTimerGame
int bBreakLoop
int bObscure
int iAddOnce
int iCount
int iDisconnectivity
int iOptionSelecting
int iIndex
int iLoops
int iProgress
int iRandIndex
int iRandomize
int iSetShuffle
int iSize
int iStartEvents
int iTest
int iTimer
int iTry
int iVersions
int iYUPIndex
ref rDoor
ref rDoorUsing
ref rEdge1
ref rEdge1Link
ref rEdge2
ref rEdge2Link
ref rNode1
ref rNode2
ref rLink
ref udfOnlyDoorRefs
string_var sMenu
string_var sShuffleKey

begin menumode
	if GetGameRestarted
		WriteStringToFile "WRLog.txt" 0 "WorldRandomizer started. Verifying plugin versions...%r"
		iVersions = 0
		if GetNVSEVersion < 6
			iVersions = 2
		elseif GetNVSEVersion == 6
			if GetNVSERevision < 2
				iVersions = 2
			elseif GetNVSERevision == 2
				if GetNVSEBeta < 4
					iVersions = 2
				endif
			endif
		endif

		if (GetPluginVersion "JIP NVSE Plugin") < 56.34
			iVersions += 4
		endif
	
		if (GetPluginVersion "JohnnyGuitarNVSE") < 430
			iVersions += 8
		endif
	
		if iVersions != 0
			PrintF "WRLog.txt" "Plugins necessary to World Randomizer are out of date or missing. Missing:"
			if GetBit iVersions 1
				PrintF "WRLog.txt" "xNVSE v6.2.4 or higher"
			endif
			if GetBit iVersions 2
				PrintF "WRLog.txt" "JIP NVSE v56.34 or higher"
			endif
			if GetBit iVersions 3
				PrintF "WRLog.txt" "JohnnyGuitar NVSE v4.30 or higher"
			endif
			MessageBoxEx "Plugins necessary to World Randomizer are out of date or missing. Check WRLog.txt in your game install folder."
			Print "Plugins necessary to World Randomizer are out of date or missing. Check WRLog.txt in your game install folder."
			return
		else
			PrintF "WRLog.txt"  "Done. Should be all good."
		endif

		if FileExists "Config\WorldRandomizer.ini" == 0
			SetINIfloat "Main:bExportRandomizer" 1
			SetINIfloat "Main:bImportRandomizerOnNextLoad" 0
			SetINIfloat "Main:bRerandomizeWorld" 0
            SetINIfloat "Main:iProblemSolverDoors" 3
			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Created WorldRandomizer.ini." )
		endif
        if eval (Ar_Size GetINISectionNames) == 1
            array_var aIsolated = Ar_Map "FalloutNV.esm:135A5B"::1 "FalloutNV.esm:135AA5"::1
            SetINISection "IsolatedExteriors" aIsolated
            aIsolated = Ar_Map "FalloutNV.esm:138A9E"::-1 "FalloutNV.esm:13F320"::1
            SetINISection "IsolatedInteriors" aIsolated
            aIsolated = Ar_Null
        endif
        if eval (GetINIfloat "Main:iProblemSolverDoors") == 0
            SetINIfloat "Main:iProblemSolverDoors" 3
        endif
        

		udfOnlyDoorRefs = ({array_var aIter} => (*aIter).GetTeleportDoor)
        iYupIndex = Call WRGetYUPIndexUDF
        Call WRGetAllDoorsUDF
        ; Call WRConnectivityUDF
        
        SetEventHandler "OnActivate" WROnActivateDoorsUDF "first"::WRAllDoors ;"second"::playerref
		SetEventHandler "OnCellEnter" WROnCellEnterUDF
        SetEventHandler "OnCrosshairOn:28" (begin function {rDoor}
            if eval aDoorsToReset && rDoor.GetTeleportDoor
                Ar_Append aDoorsToReset rDoor
            elseif eval rDoor == VPitPlayerAccessDoorREF && aOptionsSelected[0]
                VPitPlayerAccessDoorREF.Unlock
            endif
        end) 
	endif
end

begin gamemode
	if eval iVersions != 0 || (GetStage VCG01) < 55
		if eval IsModLoaded "Fallout3.esm" && (GetStage (GFFM "Fallout3.esm" "14E83")) > 5
		else
			return
		endif
	endif

	if GetGameLoaded
		PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Save file loaded." )
		aDoorsToReset = Ar_Construct "Array"
		SetGameMainLoopCallback WRVariableCheckerUDF 1 60 9
		udfOnlyDoorRefs = ({array_var aIter} => (*aIter).GetTeleportDoor)
		; iStartEvents = 1
        
        if eval (Ar_Size aShuffle) < 1 && fID == 0
            fID = rand 0 100
        endif
        
        iSetShuffle = (GetModLocalData "fCurrentLoadedRandom") != fID
        SetModLocalData "fCurrentLoadedRandom" fID
        sv_destruct sShuffleKey

		if eval (Ar_Size aWatchedVariables) < 1
			aWatchedVariables = Ar_Construct "Stringmap"
		endif
        
        iYupIndex = Call WRGetYUPIndexUDF
		
		; if eval (Ar_Size aAllDoors) != (Ar_Size (Ar_Filter (GLTA 58) WRQuestStart.udfOnlyDoorRefs))
			; Call WRGetAllDoorsUDF
		; endif
        
        array_var aKeys = RefMapKeys "*aAllDoors"
		if eval (ListGetCount WRAllDoors) < (RefMapSize "*aAllDoors")
			iIndex = -1
			while (iIndex += 1) < (Ar_Size aKeys)
				ListAddForm WRAllDoors (aKeys[iIndex])
			loop
		endif
        
        ; if eval (Ar_Size aWorldspacesDoorCount) < 1
            ; array_var aWorldspacesDoorCount = ar_Construct "Stringmap"
            ; iIndex = -1
            ; while (iIndex += 1) < (Ar_Size aKeys)
                ; rDoor = aKeys[iIndex]
                ; if eval rDoor.gpw
                    ; string_var sDoorWorld = RefToString (rDoor.gpw)
                    ; if eval Ar_HasKey aWorldspacesDoorCount sDoorWorld
                        ; Ar_Append aWorldspacesDoorCount[sDoorWorld] rDoor
                    ; else
                        ; aWorldspacesDoorCount[sDoorWorld] = Ar_List rDoor
                    ; endif
                    ; sv_destruct sDoorWorld
                ; endif
            ; loop
        ; endif
        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Set up aWorldspacesDoorCount")

		if eval (TypeOf aDoorsUsed) != "Stringmap" || (Ar_Size aDoorsUsed) < 1
;			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Setting up aDoorsUsed, size < 1" )
			aDoorsUsed = Ar_Construct "Stringmap"
            iIndex = -1
            while (iIndex += 1) < (Ar_Size aKeys)
                rDoor = aKeys[iIndex]
				aDoorsUsed[rDoor.RefToString] = 0
			loop
		elseif eval (Ar_Size aDoorsUsed) < (RefMapSize "*aAllDoors")
;			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Adding missing keys to aDoorsUsed" )
            iIndex = -1
            while (iIndex += 1) < (Ar_Size aKeys)
                rDoor = aKeys[iIndex]
				if eval !(Ar_HasKey aDoorsUsed rDoor.RefToString)
;					PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Adding " + aEntry["key"] )
					aDoorsUsed[rDoor.RefToString] = 0
				endif
			loop
		endif
		aKeys = Ar_Null

		; if eval iStartEvents
			; RemoveEventHandler "OnActivate" WROnActivateDoorsUDF "first"::WRAllDoors "second"::playerref
			; RemoveEventHandler "OnCellEnter" WROnCellEnterUDF
			; SetEventHandler "OnActivate" WROnActivateDoorsUDF "first"::WRAllDoors "second"::playerref
			; SetEventHandler "OnCellEnter" WROnCellEnterUDF
			; iStartEvents = 0
		; endif

		if eval GetINIFloat "Main:bRerandomizeWorld"
			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Rerandomize world requested." )
			iRandomize = 1
			SetINIfloat "Main:bRerandomizeWorld" 0
		elseif eval (GetINIFloat "Main:bImportRandomizerOnNextLoad")
			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Importing randomization..." )
			if eval (Ar_Size (GetINISection "aShuffle" "RandomizedWorld.ini")) > 0
				Ar_Erase aShuffle
				Ar_Erase aDoorsToReset
				Ar_ForEach aDoorsUsed ({array_var aIter} => *aIter = 0)
				iOptionSelecting = 2
				;Call WRWorldResetUDF
				Call WRReadaShuffleFromFileUDF
                SetModLocalData "fCurrentLoadedRandom" fID
                iSetShuffle = 1
                fID = rand 0 100
			else
				MessageExAlt 5 "#0|WorldRandomizer - There are no doors to import!"
				PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| No doors found from RandomizedWorld.ini." )
			endif
			SetINIfloat "Main:bImportRandomizerOnNextLoad" 0
		endif

		;This detects an old (pre-1.2) save with the mod essentially
		if eval (Ar_Size aShuffle) > 0 && (TypeOf aShuffle) != "Stringmap"
			if eval (Ar_Size aDoorList) == (Ar_Size aShuffle)
				PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Detected old aShuffle, converting to new format." )
				array_var aShuffleOld = Ar_Copy aShuffle
				aShuffle = Ar_Construct "Stringmap"
				iIndex = -1
				while (iIndex += 1) < (Ar_Size aShuffleOld)
					rDoor = aDoorList[iIndex][0]
					if eval aShuffleOld[iIndex] == -1
						aShuffle[rDoor.RefToString] = rDoor
					else
						aShuffle[rDoor.RefToString] = aDoorList[aShuffleOld[iIndex]][0]
                    endif
				loop
				aShuffleOld = aDoorList = Ar_Null
                iSetShuffle = 1
			else ;Weird.
				aShuffle = Ar_Construct "Stringmap"
				iOptionSelecting = 0
				aDoorList = Ar_Null
				MessageBoxEx "Old aShuffle detected but couldn't convert. See WRLog.txt in your game install folder or console"
				string_var sError = "Old aDoorList is not the same size as old aShuffle. This most likely occurred due to importing WorldRandomizer.txt that was generated "
				sError = $sError + "by a different (pre-1.2) version or different addons. Clearing aShuffle and randomizing anew instead (you can reload the save however)."
				Print $sError
				PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + $sError )
				sv_destruct sError
			endif
		endif
        
        if eval iAddOnce == 0 && (GetINIFloat "Main:iProblemSolverDoors") > 0
            player.additem WRProblemSolver 1
            iAddOnce = 1
        endif
        
        if eval !aRecentDoors
            aRecentDoors = Ar_Construct "Array"
        endif
        
        if eval (Ar_Size aShuffle) < 1
            iRandomize = 1
            iSetShuffle = 0
        endif

		if eval GetINIFloat "Main:bExportRandomizer" && (Ar_Size aShuffle) > 0
			Call WRWriteaShuffleToFileUDF
			SetINIfloat "Main:bExportRandomizer" 0
		endif
	endif

;====STARTING RANDOMIZATION
    if eval iRandomize == 1 ;Variable initialization
        iSetShuffle = 0
        Ar_Erase aShuffle
        Ar_Erase aDoorsToReset
        Ar_ForEach aDoorsUsed ({array_var aIter} => aDoorsUsed[aIter["key"]] = 0)
        iOptionSelecting = 0
        iRandomize = 0
        bObscure = 0
        
    elseif eval iRandomize == 2 ;Getting ready to randomize
        iRandomize = 0
        PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Resetting world.")
        aShuffle = Ar_Construct "Stringmap"
        Call WRWorldResetUDF
        
        ;Grabs all doors from the specified mods
        PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Gathering selected doors.")
        aDoors = Ar_Construct "Array"
        array_var aModsUsed = Ar_Construct "Array"
        iIndex = -1
        while (iIndex += 1) < (Ar_Size aOptions)
            if eval aOptionsSelected[iIndex]
                int iModIndex = aOptions[iIndex]
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Including mod " + $(GetNthModName iModIndex) + " in randomization." )
                array_var aAddDoors = AuxVarGetAsArr ("*" + $iModIndex) WRQuestStart ;Ar_Filter (GLTA 58 iModIndex) WRQuestStart.udfOnlyDoorRefs
                Ar_Cat aDoors aAddDoors
                Ar_Append aModsUsed iModIndex
                aAddDoors = Ar_Null
            endif
        loop
        
        ;Filters out doors according to whitelist and excluded mods
        PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Filtering out doors...")
        iIndex = Ar_Size aDoors
        array_var aDoorsNoLink = Ar_Construct "Array"
        Call WRGenerateWhitelistUDF
        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| aWhitelist size: " + $(Ar_Size aWhitelist)) 
        while (iIndex -= 1) > -1
            rDoor = aDoors[iIndex]
            ref rDoorBase = rDoor.GetBaseForm
            array_var aDoor = sv_split (rDoor.RefMapGetStr "*aAllDoors") ","
            string_var sLink = aDoor[4]
            rLink = StringToRef $sLink
            ref rLinkBase = rLink.GetBaseForm
            
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Whitelist status of door " + rDoor.RefToString + ": rDoor in whitelist: " + $(Ar_Find rDoor aWhitelist) + " rDoorBase in whitelist: " + $(Ar_Find rDoorBase aWhitelist))
            if eval (Ar_Find (GetSourceModIndex rLink) aModsUsed) == Ar_BadNumericIndex
                Ar_Erase aDoors iIndex
                ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + rLink.RefToString + " Not in selected mod(s).")
            elseif eval !(((Ar_Find rDoor aWhitelist) < 0) && ((Ar_Find rDoorBase aWhitelist) < 0))
                Ar_Erase aDoors iIndex
                ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + rDoor.RefToString + " whitelisted.")
            elseif eval !(((Ar_Find rLink aWhitelist) < 0) && ((Ar_Find rLinkBase aWhitelist) < 0))
                Ar_Append aDoorsNoLink rDoor
                ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Link of " + rDoor.RefToString + " (" + rLink.RefToString + ") whitelisted.")
            endif
        loop
        
        iIndex = 0
        array_var aSpareDoors = Ar_List WRGreenHouseDoor23 WRGreenHouseDoor24 WRGreenHouseDoor25
        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| aDoorsNoLink size: " + $(Ar_Size aDoorsNoLink))
        while (Ar_Size aDoorsNoLink) % 4
            ref rSpareDoor = aSpareDoors[iIndex]
            Ar_Append aDoorsNoLink rSpareDoor
            rSpareDoor.SetRefFlag 256 0
            iIndex += 1
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iIndex inside aDoorsNoLink: " + $iIndex)
        loop
        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iIndex after aDoorsNoLink: " + $iIndex)
        while iIndex < 3    ;Unused spare doors are inaccessible.
            ref rSpareDoor = aSpareDoors[iIndex]
            while (rSpareDoor.GetTeleportDoor != rSpareDoor)
                rSpareDoor.SetDoorTeleport rSpareDoor
            loop
            rSpareDoor.SetRefFlag 256 1
            iIndex += 1
        loop
        
        iIndex = -2
        while (iIndex += 2) < (Ar_Size aDoorsNoLink)
            rDoor = aDoorsNoLink[iIndex]
            rLink = aDoorsNoLink[iIndex+1]
            while (rDoor.GetTeleportDoor != rLink) || (rLink.GetTeleportDoor != rDoor)
                rDoor.SetDoorTeleport rLink
                rLink.SetDoorTeleport rDoor
            loop
            ; print rDoor.RefToString + " -> " + rDoor.GetTeleportDoor.RefToString + " & " + rLink.RefToString + " -> " + rLink.GetTeleportDoor.RefToString
        loop
        Ar_Erase aDoorsNoLink
        
        aModsUsed = Ar_Null
        iIndex = 0
        iCount = 0
        iProgress = 1
        iSize = Ar_Size aDoors
        bBreakLoop = 0
        PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Starting randomization...")
        iRandomize = 3
        aThreads = Ar_Construct "array"
        fTimerGame = 0
        
    elseif eval iRandomize == 3 ;The main randomization
        fTimerGame += GetSecondsPassed
        if eval iIndex < (Ar_Size aDoors) || (Ar_Size aThreads) > 0
            int iThread = -1
            ; iRandomize = 0
            while (iThread += 1) < 4
                string_var sThread = "*Thread" + $iThread
                ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iThread: " + $iThread + " Thread sizes: " + $(AuxVarSize "*Thread0" WRQuestStart) + " " + $(AuxVarSize "*Thread1" WRQuestStart) + " " + $(AuxVarSize "*Thread2" WRQuestStart) + " " + $(AuxVarSize "*Thread3" WRQuestStart))
                
                if eval (AuxVarType (sThread+"busy") 0 WRQuestStart)
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iThread " + $iThread + " is busy.")
                    continue ;Great, the thread is currently working so we can move to the next one
                elseif eval (AuxVarSize $sThread WRQuestStart) > 0 || ((AuxVarSize $sThread WRQuestStart) == 0 && iIndex < (Ar_Size aDoors))
                    if eval (AuxVarSize $sThread WRQuestStart) > 0 ;This thread just needs to keep working on its existing index
                        if eval (Ar_Find aDoors[(AuxVarGetFlt $sThread 0 WRQuestStart)] aThreads) == Ar_BadNumericIndex
                            Ar_Append aThreads aDoors[(AuxVarGetFlt $sThread 0 WRQuestStart)]
                        elseif eval (AuxVarSize $sThread WRQuestStart) == 1 ;Not free yet
                            continue
                        endif
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iThread " + $iThread + " called again.")
                    else 
                        AuxVarSetFlt $sThread iIndex 0 WRQuestStart ;Initialize the thread, so to speak
                        aRand = Ar_Range 0 (Ar_Size aDoors)-1
                        AuxVarSetFromArr (sThread+"rand") aRand WRQuestStart
                        iIndex += 1
                        ;Index may already be in thread, but we should get it and move on anyway
                        if eval (Ar_Find aDoors[iIndex-1] aThreads) != Ar_BadNumericIndex
                            continue
                        else
                            Ar_Append aThreads aDoors[iIndex-1]
                        endif
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iThread " + $iThread + " initialized.")
                    endif
                    
                    AuxVarSetFlt (sThread+"busy") 1 0 WRQuestStart
                    int bDone = 0
                    int iThreadIndex = AuxVarGetFlt $sThread 0 WRQuestStart
                    rEdge1 = aDoors[iThreadIndex]
                    iLoops = rEdge1.RefMapGetFlt "*iLoops"
                    aRand = AuxVarGetAsArr (sThread+"rand") WRQuestStart
                    
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " (size " + $(AuxVarSize $sThread WRQuestStart) + ") proc. rEdge1: " + rEdge1.RefToString + " @ index " + $iThreadIndex)
    
                    Ar_Erase aRand iThreadIndex
                    if eval (AuxVarType $sThread 1 WRQuestStart) != 2 ;This would mean we already have rEdge1Link ready.
                        if testexpr rEdge1Link = aShuffle[rEdge1.RefToString]
                        else
                            array_var aDoor = sv_split (rEdge1.RefMapGetStr "*aAllDoors") ","
                            string_var sLink = aDoor[4]
                            rEdge1Link = StringToRef $sLink
                            if eval (Ar_Find rEdge1Link aDoors) == Ar_BadNumericIndex
                                rEdge1Link = rEdge1.GetTeleportDoor
                            endif
                        endif
                        if eval (Ar_Find rEdge1Link aThreads) != Ar_BadNumericIndex
                            AuxVarErase (sThread+"busy") -1 WRQuestStart
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " (size " + $(AuxVarSize $sThread WRQuestStart) + ") waiting. rEdge1: " + rEdge1.RefToString + " @ index " + $iThreadIndex)
                            continue ;rEdge1Link is 'busy' right now, but we need it so we should just wait.
                        else
                            Ar_Append aThreads rEdge1Link
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " set auxvar 1?: " + $(
                            AuxVarSetRef $sThread rEdge1Link 1 WRQuestStart
                        endif
                    else
                        rEdge1Link = AuxVarGetRef $sThread 1 WRQuestStart
                    endif
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iThreadIndex: " + $iThreadIndex + " Door: " + rEdge1.RefToString + " aRand size: " + $(Ar_Size aRand))
                    
                    while !(bBreakLoop) && (Ar_Size aRand) > 0
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " (size " + $(AuxVarSize $sThread WRQuestStart) + ") choosing rEdge2.")
                        int iRandIndex = GetRandomInRange 0 (Ar_Size aRand)
                        rEdge2 = aDoors[aRand[iRandIndex]]
                        if eval (Ar_Find rEdge2 aThreads) != Ar_BadNumericIndex
                            Ar_Erase aRand iRandIndex
                            continue
                        else
                            Ar_Append aThreads rEdge2
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " set auxvar 2?: " + $(
                            AuxVarSetRef $sThread rEdge2 2 WRQuestStart
                        endif
                        if testexpr rEdge2Link = aShuffle[rEdge2.RefToString]
                        else
                            array_var aDoor = sv_split (rEdge2.RefMapGetStr "*aAllDoors") ","
                            string_var sLink = aDoor[4]
                            rEdge2Link = StringToRef $sLink
                            if eval (Ar_Find rEdge2Link aDoors) == Ar_BadNumericIndex
                                rEdge2Link = rEdge2.GetTeleportDoor
                            endif
                        endif
                        if eval (Ar_Find rEdge2Link aThreads) != Ar_BadNumericIndex
                            Ar_Erase aRand iRandIndex
                            Ar_Erase aThreads (Ar_Find rEdge2 aThreads)
                            AuxVarErase $sThread 2 WRQuestStart
                            continue
                        else
                            Ar_Append aThreads rEdge2Link
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " set auxvar 3?: " + $(
                            AuxVarSetRef $sThread rEdge2Link 3 WRQuestStart
                        endif
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " (size " + $(AuxVarSize $sThread WRQuestStart) + ") About to test " + rEdge2.RefToString + " and " + rEdge2Link.RefToString)
                        while ((bBreakLoop = rEdge2.call WRAreParentsDifferentUDF rEdge2Link) == -1)
                             if eval (iTry += 1) > 10
                                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + GetFormIDString rEdge2 + " call WRAreParentsDifferentUDF " + GetFormIDString rEdge2Link + " failed.")
                                iTry = 0
                                bBreakLoop = 0
                                break
                            endif
                        loop
                        if bBreakLoop == 0
                            Ar_Erase aRand iRandIndex
                            Ar_Erase aThreads (Ar_Find rEdge2 aThreads)
                            Ar_Erase aThreads (Ar_Find rEdge2Link aThreads)
                            AuxVarErase $sThread 3 WRQuestStart
                            AuxVarErase $sThread 2 WRQuestStart
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| aRand size: " + $(Ar_Size aRand))
                        endif
                    loop
                    
                    
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Door2: " + rEdge2.RefToString + " Link2: " + rEdge2Link.RefToString)
                    if eval bBreakLoop
                        while ((bBreakLoop = rEdge1.call WRAreParentsDifferentUDF rEdge2Link) == -1)
                            if eval (iTry += 1) > 10
                                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + GetFormIDString rEdge1 + " call WRAreParentsDifferentUDF " + GetFormIDString rEdge2Link + " failed.")
                                iTry = 0
                                bBreakLoop = 0
                                break
                            endif
                        loop
                    endif
                    if eval bBreakLoop
                        while((bBreakLoop = rEdge2.call WRAreParentsDifferentUDF rEdge1Link) == -1)
                            if eval (iTry += 1) > 10
                                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| " + GetFormIDString rEdge2 + " call WRAreParentsDifferentUDF " + GetFormIDString rEdge1Link + " failed.")
                                iTry = 0
                                bBreakLoop = 0
                                break
                            endif
                        loop
                    endif
                    
                    if eval bBreakLoop
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| rEdge1: " + rEdge1.RefToString + " -> rEdge2Link: " + rEdge2Link.RefToString)
                        while !(rEdge1.call WRSetDoorTeleportUDF rEdge2Link) 
                        loop
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| rEdge2Link: " + rEdge2Link.RefToString + " -> rEdge1: " + rEdge1.RefToString)
                        while !(rEdge2Link.call WRSetDoorTeleportUDF rEdge1) 
                        loop
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| rEdge2: " + rEdge2.RefToString + " -> rEdge1Link: " + rEdge1Link.RefToString)
                        while !(rEdge2.call WRSetDoorTeleportUDF rEdge1Link) 
                        loop
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| rEdge1Link: " + rEdge1Link.RefToString + " -> rEdge2: " + rEdge2.RefToString)
                        while !(rEdge1Link.call WRSetDoorTeleportUDF rEdge2) 
                        loop
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| edge1 connection: " + $(call WRIsConnectedToWorldspaceUDF rEdge1) + " edge2 connection: " + $(call WRIsConnectedToWorldspaceUDF rEdge2))
                        
                        int iConnected1
                        int iConnected1Link
                        int iConnected2
                        int iConnected2Link
                        
                        while ((iConnected1 = call WRIsConnectedToWorldspaceUDF rEdge1) == -1)
                        loop
                        while ((iConnected1Link = call WRIsConnectedToWorldspaceUDF rEdge1Link) == -1)
                        loop
                        while ((iConnected2 = call WRIsConnectedToWorldspaceUDF rEdge2) == -1)
                        loop
                        while ((iConnected2Link = call WRIsConnectedToWorldspaceUDF rEdge2Link) == -1)
                        loop
                        
                        if eval (iConnected1 + iConnected1Link + iConnected2 + iConnected2Link) == 4
                            ;Hurray, these doors probably work!
                            aShuffle[rEdge1.RefToString] = rEdge2Link
                            aShuffle[rEdge2Link.RefToString] = rEdge1
                            aShuffle[rEdge2.RefToString] = rEdge1Link
                            aShuffle[rEdge1Link.RefToString] = rEdge2
                            if eval (Ar_Find rEdge1Link aDoors) == Ar_BadNumericIndex
                                ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Warning: " + rEdge1Link.RefToString + ", now linking to " + rEdge2.RefToString + ", formerly to " + rEdge1.RefToString + ", is possibly whitelisted.")
                            endif
                            if eval (Ar_Find rEdge2Link aDoors) == Ar_BadNumericIndex
                                ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Warning: " + rEdge2Link.RefToString + ", now linking to " + rEdge1.RefToString + ", formerly to " + rEdge2.RefToString + ", is possibly whitelisted.")
                            endif
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Set " + rEdge1.RefToString + " <-> " + rEdge2Link.RefToString)
                            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Set " + rEdge2.RefToString + " <-> " + rEdge1Link.RefToString)
                            
                            if eval iLoops > 100
                                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Door " + rEdge1.RefToString + " took " + $iLoops + " loops.")
                            endif
                            bDone = 1
                        else ;Resetting the doors.
                            while ((rEdge1.call WRSetDoorTeleportUDF rEdge1Link) == -1)
                            loop
                            while ((rEdge1Link.call WRSetDoorTeleportUDF rEdge1) == -1)
                            loop
                            while ((rEdge2.call WRSetDoorTeleportUDF rEdge2Link) == -1)
                            loop
                            while ((rEdge2Link.call WRSetDoorTeleportUDF rEdge2) == -1)
                            loop
                            
                            iLoops += 1
                        endif
                    endif
                    
                    
                    if eval ((Ar_Size aRand) < 1 || iLoops > 500) && !(bDone) ;Welp, we're done here.
                        bDone = 1
                        PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Skipping problematic door: " + rEdge1.RefToString)
                    endif
                    if eval bDone
                        ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " done.")
                        iCount += 1
                        rEdge1.RefMapErase "*iLoops"
                        Ar_Erase aThreads (Ar_Find rEdge1 aThreads)
                        Ar_Erase aThreads (Ar_Find rEdge1Link aThreads)
                        AuxVarErase $sThread -1 WRQuestStart
                        AuxVarErase (sThread+"rand") -1 WRQuestStart
                    else
                        rEdge1.RefMapSetFlt "*iLoops" iLoops
                        AuxVarErase $sThread 3 WRQuestStart
                        AuxVarErase $sThread 2 WRQuestStart
                        AuxVarSetFromArr (sThread+"rand") aRand WRQuestStart
                    endif
                    Ar_Erase aThreads (Ar_Find rEdge2 aThreads)
                    Ar_Erase aThreads (Ar_Find rEdge2Link aThreads)
                    AuxVarErase (sThread+"busy") -1 WRQuestStart
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Thread " + $iThread + " (size " + $(AuxVarSize $sThread WRQuestStart) + ") end. rEdge1: " + rEdge1.RefToString + " @ index " + $iThreadIndex)
                    rEdge1 = rEdge2 = rEdge1Link = rEdge2Link = 0
                    bBreakLoop = 0
                                    
                                    
                else
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| iThread " + $iThread + " waiting for iIndex or unneeded (iIndex: " + $iIndex + ")")
                    ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| aThreads: " + $aThreads)
                    continue ; Wait for iIndex to be freed OR we don't need it anymore
                endif
            loop
           
        
            float fFourth = iSize / 4.0
            if eval iProgress != 4 && iCount >= (fFourth * iProgress)
                MessageExAlt 3 "#3|(World Randomizer) Randomization is %g%% done." (iProgress * 25)
                Print "(World Randomizer) Randomization is " + $(iProgress * 25) + "% done."
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Randomization is " + $(iProgress * 25) + "% done.")
                iProgress += 1
            endif
            iRandomize = 3
        else
            aDoors = aDoorsNoLink = aThreads = aRand = Ar_Null
            iRandomize = 0
            PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Finished randomizing doors. (Took " + $fTimerGame + " seconds.)")
            MessageExAlt 3 "#4|(World Randomizer) Randomization is done."
            Print "(World Randomizer) Randomization is done. (Took " + $fTimerGame + " seconds.)"
            PlaySound UIHackingPassGood
            fTimerGame = 0
            fID = rand 0 100
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| New fID is: " + $fID)
            SetModLocalData "fCurrentLoadedRandom" fID
            call WROnCellEnterUDF (player.gpc)
            
            ; if iTest < 10
                ; iTest += 1
                ; iRandomize = 2
            ; else
                ; iTest = 0
            ; endif
        endif
    endif

;====SETTING aSHUFFLE
    if eval iSetShuffle && (Ar_Size aShuffle) > 0
        if eval !(sShuffleKey) || sShuffleKey == Ar_BadStringIndex
            PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Different aShuffle detected, setting doors..." )
            Call WRWorldResetUDF
            iIndex = 0
            sShuffleKey = Ar_First aShuffle
        else
            rDoor = StringToRef $sShuffleKey
            if eval IsFormValid rDoor && rDoor.RefMapGetType "*aAllDoors" && Ar_HasKey aShuffle sShuffleKey
                ref rValue = aShuffle[sShuffleKey]
                if eval IsFormValid rValue && rValue.RefMapGetType "*aAllDoors"
                    rDoor.call WRSetDoorTeleportUDF rValue
                    iIndex += 1
                else
                    PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Setting the link to " + $sShuffleKey + " failed, mod not loaded?" )
                endif 
            else
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Setting door " + $sShuffleKey + " failed, mod not loaded?" )
            endif
            
            sShuffleKey = Ar_Next aShuffle sShuffleKey
            
            if eval sShuffleKey == Ar_BadStringIndex
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Set " + $iIndex + " doors." )
                MessageExAlt 3 "#4|(World Randomizer) Done setting doors."
                Print "(World Randomizer) Done setting doors."
                PlaySound UIHackingPassGood
                iOptionSelecting = 99
                iSetShuffle = 0
                call WROnCellEnterUDF (player.gpc)
            else
                int iFourth = (Ar_Size aShuffle) / 4
                if eval iIndex % iFourth == 0 && (iIndex / iFourth) != 4
                    MessageExAlt 3 "#3|(World Randomizer) Setting doors is %g%% done." (iIndex / iFourth * 25)
                    Print "(World Randomizer) Setting doors is " + $(iIndex / iFourth * 25) + "% done."
                    PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Setting doors is " + $(iIndex / iFourth * 25) + "% done.")
                endif
            endif
        endif
    endif

;====OPTION SELECT
	if eval iOptionSelecting < 2
		if eval iOptionSelecting == 0
            ; PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| In iOptionSelecting = 0")
            aOptions = AuxVarGetAsArr "*aOptions" WRQuestStart
            aOptionsSelected = Ar_Construct "array"
			Ar_Resize aOptionsSelected (Ar_size aOptions) 0
			iOptionSelecting = 1
		endif
        sMenu = AuxVarGetStr "*sMenu" 0 WRQuestStart
		MessageBoxExAlt WRPluginSelectionUDF $sMenu
	elseif eval iOptionSelecting >= 2 && iOptionSelecting < 4
		if iOptionSelecting == 2
			GetButtonPressed ;Not actually sure this is necessary, but just in case to clear it
			ShowMessage WRObscureMessage
			iOptionSelecting = 3
		endif

		if eval (bObscure = GetButtonPressed) != -1
			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Door activation prompt obscuring: " + $bObscure)
            if iSetShuffle
                iOptionSelecting = 99
            else
                iOptionSelecting = 4
            endif
		endif
	elseif eval iOptionSelecting == 4
        MessageBoxEx "Note: Randomization can take anywhere from less than a minute to about 4 minutes, depending on mods. It is advised you don't travel through doors during it (they may rerandomize behind you). Also, don't open any menus or processing will pause."
		iOptionSelecting = 99
        iRandomize = 2
	endif

;====DOOR RESETTING -- Essentially refreshes the local doors when you change cells
	if eval (Ar_Size aDoorsToReset) > 0
		int iDoorResetIndex = (Ar_Size aDoorsToReset) - 1
		rDoor = aDoorsToReset[iDoorResetIndex]
        if eval (Ar_HasKey aShuffle rDoor.RefToString)
            rLink = aShuffle[rDoor.RefToString]
        else
            rLink = rDoor.GetTeleportDoor
        endif
		rDoor.call WRSetDoorTeleportUDF rLink
		Ar_Erase aDoorsToReset iDoorResetIndex
	endif

	if rDoorUsing
		if iTimer > 0
			iTimer -= 1
		else
			rDoorUsing = 0
		endif
	endif

;====This imod makes the screen go really dark sometimes with WR
	if eval IsImageSpaceActive NVCaveEnteringISFX
		rimod NVCaveEnteringISFX
	endif
end