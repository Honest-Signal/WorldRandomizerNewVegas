scn WRRandomizeWorldUDF

begin function { }
	Call WRWorldResetUDF

	array_var aDoors = Ar_Construct "Array"
	array_var aModsUsed = Ar_Construct "Array"
	int iIndex = -1
	while (iIndex += 1) < (Ar_Size WRQuestStart.aOptions)
		if eval WRQuestStart.aOptionsSelected[iIndex]
			int iModIndex = WRQuestStart.aOptions[iIndex]
			PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Including mod " + $(GetNthModName iModIndex) + " in randomization" )
			array_var aAddDoors = Ar_Filter (GLTA 58 iModIndex) WRQuestStart.udfOnlyDoorRefs
			Ar_Cat aDoors aAddDoors
			Ar_Append aModsUsed iModIndex
		endif
	loop
    
    ;Further filtering of doors
	iIndex = -1
    call WRGenerateWhitelistUDF
	array_var aWhitelist = GetArrayVar aWhitelist WRQuestStart
	while (iIndex += 1) < (Ar_Size aDoors)
		ref rDoor = aDoors[iIndex]
		string_var sKeystring = "Main/" + rDoor.RefToString
		ref rLink = StringToRef (GetINIString $sKeystring "WROriginalLinks.ini")

		if eval (Ar_Find (GetSourceModIndex rLink) aModsUsed) == Ar_BadNumericIndex
			Ar_Erase aDoors iIndex
		elseif eval ((Ar_Find rDoor aWhitelist) != Ar_BadNumericIndex) || ((Ar_Find (rDoor.GetBaseForm) aWhitelist) != Ar_BadNumericIndex)
			Ar_Erase aDoors iIndex
		endif
	loop

	array_var aShuffle = GetArrayVar aShuffle WRQuestStart
	iIndex = -1
    int iBreakLoop = 0
    
    int iRand
    ref rEdge1
    ref rEdge1Link
    ref rEdge2
    ref rEdge2Link
	while (iIndex += 1) < (Ar_Size aDoors)
        while !(iBreakLoop)
            iRand = GetRandomInRange 0 (Ar_Size aDoors)-1
            rEdge1 = aDoors[iRand]
            rEdge1Link = rEdge1.GetTeleportDoor
            iBreakLoop = call WRQuestStart.udfAreParentsDifferent rEdge1 rEdge1Link
        loop
        iBreakLoop = 0
        
        while !(iBreakLoop)
            iRand = GetRandomInRange 0 (Ar_Size aDoors)-1
            rEdge2 = aDoors[iRand]
            rEdge2Link = rEdge2.GetTeleportDoor
            iBreakLoop = call WRQuestStart.udfAreParentsDifferent rEdge2 rEdge2Link
        loop
        iBreakLoop = 0
        
        iBreakLoop = call WRQuestStart.udfAreParentsDifferent rEdge1 rEdge2Link
        if eval iBreakLoop
            iBreakLoop = call WRQuestStart.udfAreParentsDifferent rEdge2 rEdge1Link
        endif
        if eval iBreakLoop
            rEdge1.call WRSetDoorTeleportUDF rEdge2Link
            rEdge2Link.call WRSetDoorTeleportUDF rEdge1
            rEdge2.call WRSetDoorTeleportUDF rEdge1Link
            rEdge1Link.call WRSetDoorTeleportUDF rEdge2
            
            if eval (call WRIsConnectedToWorldspaceUDF rEdge1) && (call WRIsConnectedToWorldspaceUDF rEdge2)
                aShuffle[rEdge1.RefToString] = rEdge2Link
                aShuffle[rEdge2Link.RefToString] = rEdge1
                aShuffle[rEdge2.RefToString] = rEdge1Link
                aShuffle[rEdge1Link.RefToString] = rEdge2
                
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Connected " + rEdge1.RefToString + " to " + rEdge2Link.RefToString + " and vice-versa.")
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Connected " + rEdge2.RefToString + " to " + rEdge1Link.RefToString + " and vice-versa.")
            else
                rEdge1.call WRSetDoorTeleportUDF rEdge1Link
                rEdge1Link.call WRSetDoorTeleportUDF rEdge1
                rEdge2.call WRSetDoorTeleportUDF rEdge2Link
                rEdge2Link.call WRSetDoorTeleportUDF rEdge2
            endif
        endif
        iBreakLoop = 0
    
;		PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Finished iIndex: " + $iIndex)
	loop
    PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "| Done.")
    
    iIndex = -1
    while (iIndex += 1) < (Ar_Size aDoors)
        ref rDoor = aDoors[iIndex]
        ref rLink = rDoor.GetTeleportDoor
        if eval rDoor.GetLocked && rDoor.GetLockLevel == 255 && !(rDoor.GetOpenKey)
;            rDoor.unlock
            if eval rLink.GetOpenKey
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "|!! Possible permanently locked door @ " + rDoor.RefToString + ". Key to open: " + RefToString (rLink.GetOpenKey) + " " + GetName (rLink.GetOpenKey))
            else
                PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "|!! Possible permanently locked door @ " + rDoor.RefToString)
            endif
        endif
        
        if eval rDoor != rLink.GetTeleportDoor
            PrintF "WRLog.txt" $((call WRGetTimeStampUDF) + "|!! " + rDoor.RefToString + " appears to be one-way to " + rLink.RefToString)
        endif
    loop
end